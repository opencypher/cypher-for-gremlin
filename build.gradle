buildscript {
    ext {
        assertjVersion = '3.8.0'
        guavaVersion = '22.0'
        junitVersion = '4.12'
        cypherVersion = '9.0'
        cypherFrontendVersion = '1.0.0'
        scalaVersion = '2.11'
        scalaPatchVersion = '12'
        springBootVersion = '1.5.6.RELEASE'
        tinkerpopVersion = '3.3.2'
        githubProject = "opencypher/cypher-for-gremlin"
        tagPrefix = 'v'
        updateFilesOnRelease = []
    }

    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.8.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.5'
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.0.2'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
        classpath 'org.ajoberstar:gradle-git-publish:0.3.3'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.8.3'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}

task gitHooks(type: Copy) {
    from "${rootDir}/hooks"
    into "${rootDir}/.git/hooks"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.diffplug.gradle.spotless'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ['-Xlint:deprecation,unchecked', '-Werror', '-proc:none']
    }
    tasks.withType(ScalaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += ['-Xlint:deprecation,unchecked', '-Werror', '-proc:none']
        scalaCompileOptions.additionalParameters = [
            '-Xfatal-warnings'
        ]
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.assertj:assertj-core:${assertjVersion}"
        testCompile 'org.mockito:mockito-all:1.10.19'
    }

    if (project.hasProperty('ci')) {
        test {
            testLogging.showStandardStreams = true
            minHeapSize = '128m'
            maxHeapSize = '256m'
        }
    }

    spotless {
        format 'misc', {
            target '**/*.java', '**/*.scala'
            endWithNewline()
            trimTrailingWhitespace()
            licenseHeaderFile "${rootDir}/license-header.txt", 'package '
        }
        java {
            importOrder ''
            removeUnusedImports()
        }
        scala {
            scalafmt('1.4.0').
                configFile("${rootDir}/.scalafmt.conf")
        }
    }

    build.dependsOn gitHooks
}

project(':translation') {
    ext.releaseToMavenCentral = true
    ext.title = 'Cypher for Gremlin: Translation'
    description 'Cypher to Gremlin translation library for Java'

    apply plugin: 'scala'

    sourceSets.main.scala.srcDir "src/main/java"
    sourceSets.main.java.srcDirs = []
    sourceSets.test.scala.srcDir "src/test/java"
    sourceSets.test.java.srcDirs = []

    dependencies {
        compile project(':tinkerpop:cypher-gremlin-extensions')

        compile "org.scala-lang:scala-library:${scalaVersion}.${scalaPatchVersion}"
        compile "org.scala-lang.modules:scala-java8-compat_${scalaVersion}:0.8.0"
        compile("org.opencypher:front-end-${cypherVersion}:${cypherFrontendVersion}") {
            exclude group: 'org.scalatest'
            exclude group: 'org.scalacheck'
        }
    }

    scaladoc {
        title "${project.ext.title} ${-> project.version} API"
    }
}

project(':tinkerpop:cypher-gremlin-extensions') {
    ext.releaseToMavenCentral = true
    ext.title = 'Cypher for Gremlin: Gremlin language extensions'
    description 'Cypher for Gremlin custom functions and predicates for Gremlin'

    dependencies {
        compile "org.apache.tinkerpop:gremlin-core:${tinkerpopVersion}"
    }
}

project(':tinkerpop:cypher-gremlin-server-client') {
    ext.releaseToMavenCentral = true
    ext.title = 'Cypher for Gremlin: Cypher Client for Gremlin Server'
    description 'Gremlin Server client wrapper that can send Cypher queries to a Cypher-enabled Gremlin Server'

    dependencies {
        compile project(':translation')

        compile "org.apache.tinkerpop:gremlin-driver:${tinkerpopVersion}"
    }
}

project(':tinkerpop:cypher-gremlin-server-plugin') {
    ext.releaseToMavenCentral = true
    ext.title = 'Cypher for Gremlin: Gremlin Server Cypher Plugin'
    description 'Gremlin Server plugin that enables Cypher query processing'

    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile (project(':translation')) {
            exclude group: 'org.apache.tinkerpop'
        }

        compileOnly "org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}"
    }
}

project(':tinkerpop:cypher-gremlin-console-plugin') {
    ext.releaseToMavenCentral = true
    ext.title = 'Cypher for Gremlin: Gremlin Console Cypher Plugin'
    description 'Gremlin Console plugin that enables client-side translation of Cypher queries or communication with a Cypher-enabled Gremlin Server'

    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile(project(':tinkerpop:cypher-gremlin-server-client')) {
            exclude group: 'org.apache.tinkerpop'
        }
        compileOnly "org.apache.tinkerpop:gremlin-console:${tinkerpopVersion}"
    }

    task makeDist(type: Exec) {
        commandLine 'make'
        args = ["dist",
                "PROJECT_VERSION=${->project.version}",
                "TINKERPOP_VERSION=${tinkerpopVersion}"]
    }
}

project(':tinkerpop:cypher-gremlin-neo4j-driver') {
    ext.releaseToMavenCentral = true
    ext.title = 'Cypher for Gremlin: Cypher Gremlin Neo4j Driver for Java'
    description 'Run Cypher queries via Neo4j Java API on Gremlin Server or a compatible graph database'

    dependencies {
        compile project(':tinkerpop:cypher-gremlin-server-client')
        compile "org.apache.tinkerpop:gremlin-core:${tinkerpopVersion}"
        compile 'org.neo4j.driver:neo4j-java-driver:1.4.4'

        testCompile "org.apache.tinkerpop:tinkergraph-gremlin:${tinkerpopVersion}"
    }
}

project(':testware:testware-common') {
    dependencies {
        compile project(':tinkerpop:cypher-gremlin-server-client')
        compile project(':tinkerpop:cypher-gremlin-server-plugin')
        compile project(':tinkerpop:cypher-gremlin-console-plugin')

        compile "junit:junit:${junitVersion}"
        compile "org.assertj:assertj-core:${assertjVersion}"
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'ch.qos.logback:logback-classic:1.2.3'
        compile "com.google.guava:guava:${guavaVersion}"
        compile "org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}"
        compile "org.apache.tinkerpop:gremlin-console:${tinkerpopVersion}"
        compile "org.apache.tinkerpop:tinkergraph-gremlin:${tinkerpopVersion}"
    }
}

project(':testware:integration-tests') {
    dependencies {
        testCompile project(':testware:testware-common')
        testCompile project(':tinkerpop:cypher-gremlin-neo4j-driver')

        testCompile 'com.github.stefanbirkner:system-rules:1.17.1'
        testCompile 'org.awaitility:awaitility:3.0.0'
    }

    test {
        systemProperty 'translate', System.getProperty('translate')
    }

    task('testGremlinGroovyTranslation', type: Test) {
        systemProperty 'translate', 'gremlin'

        if (project.hasProperty('ci')) {
            testLogging.showStandardStreams = true
            minHeapSize = '128m'
            maxHeapSize = '256m'
        }

        useJUnit {
            include 'org/opencypher/gremlin/queries/**'
            excludeCategories 'org.opencypher.gremlin.groups.SkipWithGremlinGroovy'
        }
    }
    check.dependsOn testGremlinGroovyTranslation

    task('testBytecodeTranslation', type: Test) {
        systemProperty 'translate', 'bytecode'

        if (project.hasProperty('ci')) {
            testLogging.showStandardStreams = true
            minHeapSize = '128m'
            maxHeapSize = '256m'
        }

        useJUnit {
            include 'org/opencypher/gremlin/queries/**'
            excludeCategories 'org.opencypher.gremlin.groups.SkipWithBytecode'
        }
    }
    check.dependsOn testBytecodeTranslation
}

project(':testware:performance-tests') {
    apply plugin: 'me.champeau.gradle.jmh'

    dependencies {
        jmh project(':tinkerpop:cypher-gremlin-server-client')
        jmh "org.apache.tinkerpop:tinkergraph-gremlin:${tinkerpopVersion}"
        jmh "com.google.guava:guava:${guavaVersion}"
    }

    jmh {
        jmhVersion = '1.20'
        benchmarkMode = ['sample']
        failOnError = true
        fork = 1
        iterations = 5
        timeUnit = 'ms'
        warmupIterations = 1
    }
}

project(':testware:tck') {
    apply plugin: 'scala'
    apply plugin: 'com.kncept.junit5.reporter'

    ext.hasTckTask = {
        project.getGradle().
            getStartParameter().
            getTaskNames().
            contains("tck")
    }

    tasks['junitHtmlReport'].onlyIf {
        project.hasTckTask()
    }

    task('tck', type: Test) {
        onlyIf { project.hasTckTask() }
        ext.cucumberReportDir = "${project.buildDir.absolutePath}/reports/tests/cucumber"
        systemProperty "cucumber.options", "--plugin 'json:${ext.cucumberReportDir}/cucumber.json"
        useJUnitPlatform()
        ignoreFailures true

        systemProperty 'configPath', System.getProperty('configPath')
        systemProperty 'translate', System.getProperty('translate')
        systemProperty 'feature', System.getProperty('feature')
        systemProperty 'scenario', System.getProperty('scenario')

        if (project.hasProperty('ci')) {
            testLogging.showStandardStreams = true
            minHeapSize = '256m'
            maxHeapSize = '512m'
        }
    }.finalizedBy('junitHtmlReport', 'tckReport')

    task('tckReport', type: JavaExec) {
        onlyIf { project.hasTckTask() }
        systemProperty("projectVersion", "${->project.version}")
        systemProperty("buildNumber", project.findProperty("buildNumber"))

        main = 'org.opencypher.gremlin.tck.reports.OpenCypherTckReport'
        classpath = sourceSets.test.runtimeClasspath
    }

    task('tckRegression', type: JavaExec) {
        main = 'org.opencypher.gremlin.tck.regression.TckResultsComparator'
        classpath = sourceSets.test.runtimeClasspath
    }

    task('tckSaveReport', type: Copy) {
        from 'build/test-results/tck/TEST-org.opencypher.gremlin.tck.TckTest.xml'
        into 'build/test-results/tck/'
        rename { fileName -> "TckTest-before.xml" }
    }

    repositories {
        maven { url "https://jitpack.io" }
    }

    dependencies {
        compile project(':testware:testware-common')

        testCompile "org.scala-lang:scala-library:${scalaVersion}.${scalaPatchVersion}"
        testCompile "org.scala-lang.modules:scala-java8-compat_${scalaVersion}:0.8.0"
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
        testCompile 'com.github.opencypher.openCypher:tck-api:48fb78cd7f'
        testCompile 'io.cucumber:cucumber-core:2.4.0'
        testCompile 'net.masterthought:cucumber-reporting:3.16.0'
        testCompile 'org.freemarker:freemarker:2.3.23'
        testCompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.0'
    }
}

apply plugin: 'pl.allegro.tech.build.axion-release'

def signOff(message) {
    def user = "git config user.name".execute().text.trim()
    def email = "git config user.email".execute().text.trim()
    "$message\n\nSigned-off-by: $user <$email>"
}

scmVersion {
    tag {
        prefix = tagPrefix
        versionSeparator = ''
    }
    hooks {
        pre 'fileUpdate', [files:  updateFilesOnRelease, pattern: {v, c -> /$v/}, replacement: {v, c -> "$v"}]
        pre 'commit', {v, p -> signOff("Release $v")}
    }
    localOnly = true
}

allprojects {
    group 'org.opencypher.gremlin'
    version "${->scmVersion.version}"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    if (isReleaseVersion && project.hasProperty('releaseToMavenCentral')) {
        apply plugin: 'maven'
        apply plugin: 'signing'

        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }

        signing {
            required { gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: project.findProperty('nexusUsername'),
                            password: project.findProperty('nexusPassword'))
                    }

                    pom.project {
                        name project.title
                        description project.description
                        url "https://github.com/${githubProject}"
                        packaging 'jar'

                        scm {
                            connection "scm:git:https://github.com/${githubProject}.git"
                            developerConnection "scm:git:git@github.com:${githubProject}.git"
                            url "https://github.com/${githubProject}.git"
                        }

                        licenses {
                            license {
                                name 'The Apache License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                name 'The Cypher for Gremlin team'
                                email 'opencypher@googlegroups.com'
                            }
                        }
                    }
                }
            }
        }
    }
}

apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = "org.opencypher"
}

apply plugin: 'co.riiid.gradle'

github {
    owner 'opencypher'
    repo 'cypher-for-gremlin'
    token = project.findProperty('githubToken') ?: "undefined"
    tagName "${tagPrefix}${->project.version}"
    name = "${->project.version}"
    body = ''
    draft true
    assets = [
        "tinkerpop/cypher-gremlin-server-plugin/build/libs/cypher-gremlin-server-plugin-${->project.version}-all.jar",
        "tinkerpop/cypher-gremlin-console-plugin/build/libs/cypher-gremlin-console-plugin-${->project.version}-all.jar",
        "tinkerpop/cypher-gremlin-console-plugin/build/dist/cypher-gremlin-console-${tinkerpopVersion}.zip"
    ]
}

task allJavadoc(type: Javadoc, group: "Documentation") {
    description = 'Generates combined Javadoc from all the modules'
    title = "Cypher for Gremlin ${->project.version} API"
    def exportedProjects = allprojects.findAll { it.hasProperty('releaseToMavenCentral') }
    source exportedProjects.collect { it.sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { it.sourceSets.main.compileClasspath })
    options.links 'https://docs.oracle.com/javase/8/docs/api/'
    options.links "https://tinkerpop.apache.org/javadocs/${tinkerpopVersion}/full/"
    options.links "https://neo4j.com/docs/api/java-driver/1.4/"
    destinationDir = file("${buildDir}/docs/javadoc")
}

apply plugin: 'org.ajoberstar.git-publish'

gitPublish {
    repoUri = "git@github.com:${githubProject}.git"
    branch = 'gh-pages'
    contents {
        from(allJavadoc) {
            into "api/${->project.version}/java"
        }
        from(project(':translation').getTasks().getByName('scaladoc')) {
            into "api/${->project.version}/scala"
        }
        from(project(':testware:tck').getTasks().getByName('tck').cucumberReportDir) {
            into "test-reports/${->project.version}"
        }
    }
    preserve {
        include '**' // keep all existing files
    }
    commitMessage = "Publish release ${->project.version}"
}

gitPublishCopy.dependsOn(allJavadoc, ':translation:scaladoc')

def allReadme = {
    def projects = allprojects.collect {
        it.projectDir.absolutePath + "/README.md"
    }
    projects.findAll {
        def file = new File(it)
        file.exists()
    }
}
updateFilesOnRelease.addAll(allReadme())

apply plugin: 'base'
clean {
    delete "${rootDir}/build"
}
